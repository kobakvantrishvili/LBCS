
Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f4  080060f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080060fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08006108  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08006108  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017916  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a3  00000000  00000000  00037952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003b630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f874  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f4a  00000000  00000000  0005c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d753f  00000000  00000000  0007213e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014967d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e4  00000000  00000000  001496d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006094 	.word	0x08006094

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006094 	.word	0x08006094

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	adc_val = HAL_ADC_GetValue(&hadc1); // read ADC value
 8000524:	480e      	ldr	r0, [pc, #56]	; (8000560 <HAL_ADC_ConvCpltCallback+0x44>)
 8000526:	f001 f943 	bl	80017b0 <HAL_ADC_GetValue>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <HAL_ADC_ConvCpltCallback+0x48>)
 8000530:	801a      	strh	r2, [r3, #0]
	tx_data[0] = adc_val >>  8;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_ADC_ConvCpltCallback+0x48>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	0a1b      	lsrs	r3, r3, #8
 8000538:	b29b      	uxth	r3, r3
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_ADC_ConvCpltCallback+0x4c>)
 800053e:	701a      	strb	r2, [r3, #0]
	tx_data[1] = adc_val;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_ADC_ConvCpltCallback+0x48>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000548:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart1, tx_data, 2, 0);
 800054a:	2300      	movs	r3, #0
 800054c:	2202      	movs	r2, #2
 800054e:	4906      	ldr	r1, [pc, #24]	; (8000568 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000550:	4806      	ldr	r0, [pc, #24]	; (800056c <HAL_ADC_ConvCpltCallback+0x50>)
 8000552:	f004 fb5b 	bl	8004c0c <HAL_UART_Transmit>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028
 8000564:	20000170 	.word	0x20000170
 8000568:	20000174 	.word	0x20000174
 800056c:	200000e0 	.word	0x200000e0

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fbab 	bl	8000cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f81e 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9c0 	bl	8000900 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 f866 	bl	8000650 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000584:	f000 f970 	bl	8000868 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000588:	f000 f8dc 	bl	8000744 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <main+0x40>)
 800058e:	f000 ffdd 	bl	800154c <HAL_ADC_Start_IT>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <main+0x2c>
	  Error_Handler();
 8000598:	f000 f9e2 	bl	8000960 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800059c:	2100      	movs	r1, #0
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <main+0x44>)
 80005a0:	f003 fc02 	bl	8003da8 <HAL_TIM_PWM_Start>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <main+0x3e>
	  Error_Handler();
 80005aa:	f000 f9d9 	bl	8000960 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0x3e>
 80005b0:	20000028 	.word	0x20000028
 80005b4:	20000094 	.word	0x20000094

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2238      	movs	r2, #56	; 0x38
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fd5c 	bl	8006084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005da:	2000      	movs	r0, #0
 80005dc:	f002 fbc4 	bl	8002d68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2340      	movs	r3, #64	; 0x40
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005fa:	2355      	movs	r3, #85	; 0x55
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fc4e 	bl	8002eb0 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800061a:	f000 f9a1 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2303      	movs	r3, #3
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2104      	movs	r1, #4
 8000636:	4618      	mov	r0, r3
 8000638:	f002 ff52 	bl	80034e0 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000642:	f000 f98d 	bl	8000960 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2220      	movs	r2, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fd0b 	bl	8006084 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <MX_ADC1_Init+0xec>)
 8000670:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000674:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <MX_ADC1_Init+0xec>)
 8000678:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_ADC1_Init+0xec>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_ADC1_Init+0xec>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <MX_ADC1_Init+0xec>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_ADC1_Init+0xec>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC1_Init+0xec>)
 8000698:	2204      	movs	r2, #4
 800069a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC1_Init+0xec>)
 800069e:	2200      	movs	r2, #0
 80006a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC1_Init+0xec>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC1_Init+0xec>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC1_Init+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC1_Init+0xec>)
 80006b8:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC1_Init+0xec>)
 80006c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC1_Init+0xec>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC1_Init+0xec>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC1_Init+0xec>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006dc:	4817      	ldr	r0, [pc, #92]	; (800073c <MX_ADC1_Init+0xec>)
 80006de:	f000 fdab 	bl	8001238 <HAL_ADC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006e8:	f000 f93a 	bl	8000960 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	4619      	mov	r1, r3
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_ADC1_Init+0xec>)
 80006f8:	f001 ff40 	bl	800257c <HAL_ADCEx_MultiModeConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000702:	f000 f92d 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_ADC1_Init+0xf0>)
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2306      	movs	r3, #6
 800070c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	237f      	movs	r3, #127	; 0x7f
 8000714:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC1_Init+0xec>)
 8000724:	f001 fa80 	bl	8001c28 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800072e:	f000 f917 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3730      	adds	r7, #48	; 0x30
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000028 	.word	0x20000028
 8000740:	04300002 	.word	0x04300002

08000744 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b098      	sub	sp, #96	; 0x60
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2234      	movs	r2, #52	; 0x34
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f005 fc87 	bl	8006084 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <MX_TIM1_Init+0x11c>)
 8000778:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <MX_TIM1_Init+0x120>)
 800077a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170;
 800077c:	4b38      	ldr	r3, [pc, #224]	; (8000860 <MX_TIM1_Init+0x11c>)
 800077e:	22aa      	movs	r2, #170	; 0xaa
 8000780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_TIM1_Init+0x11c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <MX_TIM1_Init+0x11c>)
 800078a:	2214      	movs	r2, #20
 800078c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_TIM1_Init+0x11c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000794:	4b32      	ldr	r3, [pc, #200]	; (8000860 <MX_TIM1_Init+0x11c>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <MX_TIM1_Init+0x11c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a0:	482f      	ldr	r0, [pc, #188]	; (8000860 <MX_TIM1_Init+0x11c>)
 80007a2:	f003 faa9 	bl	8003cf8 <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007ac:	f000 f8d8 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007b0:	2320      	movs	r3, #32
 80007b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007c0:	4619      	mov	r1, r3
 80007c2:	4827      	ldr	r0, [pc, #156]	; (8000860 <MX_TIM1_Init+0x11c>)
 80007c4:	f004 f8b0 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80007ce:	f000 f8c7 	bl	8000960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d2:	2360      	movs	r3, #96	; 0x60
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007da:	2300      	movs	r3, #0
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_TIM1_Init+0x11c>)
 80007f8:	f003 fbd6 	bl	8003fa8 <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000802:	f000 f8ad 	bl	8000960 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800082c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM1_Init+0x11c>)
 8000844:	f004 f8f2 	bl	8004a2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800084e:	f000 f887 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM1_Init+0x11c>)
 8000854:	f000 f92a 	bl	8000aac <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3760      	adds	r7, #96	; 0x60
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000094 	.word	0x20000094
 8000864:	40012c00 	.word	0x40012c00

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <MX_USART1_UART_Init+0x94>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1024000;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 8000874:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 80008b2:	f004 f95b 	bl	8004b6c <HAL_UART_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008bc:	f000 f850 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 80008c4:	f005 faef 	bl	8005ea6 <HAL_UARTEx_SetTxFifoThreshold>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f000 f847 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4808      	ldr	r0, [pc, #32]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 80008d6:	f005 fb24 	bl	8005f22 <HAL_UARTEx_SetRxFifoThreshold>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f83e 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_USART1_UART_Init+0x90>)
 80008e6:	f005 faa5 	bl	8005e34 <HAL_UARTEx_DisableFifoMode>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008f0:	f000 f836 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000e0 	.word	0x200000e0
 80008fc:	40013800 	.word	0x40013800

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_GPIO_Init+0x5c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <MX_GPIO_Init+0x5c>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_GPIO_Init+0x5c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_GPIO_Init+0x5c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <MX_GPIO_Init+0x5c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_GPIO_Init+0x5c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_GPIO_Init+0x5c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <MX_GPIO_Init+0x5c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_GPIO_Init+0x5c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_MspInit+0x44>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	; 0x60
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x44>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09a      	sub	sp, #104	; 0x68
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	2244      	movs	r2, #68	; 0x44
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f005 fb55 	bl	8006084 <memset>
  if(hadc->Instance==ADC1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009e2:	d13c      	bne.n	8000a5e <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 ff8f 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a00:	f7ff ffae 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_ADC_MspInit+0xb4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_ADC_MspInit+0xb4>)
 8000a0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_ADC_MspInit+0xb4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_ADC_MspInit+0xb4>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <HAL_ADC_MspInit+0xb4>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_ADC_MspInit+0xb4>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a34:	2301      	movs	r3, #1
 8000a36:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f002 f80b 	bl	8002a64 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2012      	movs	r0, #18
 8000a54:	f001 ff11 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a58:	2012      	movs	r0, #18
 8000a5a:	f001 ff28 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3768      	adds	r7, #104	; 0x68
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x38>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10b      	bne.n	8000a96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40012c00 	.word	0x40012c00
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <HAL_TIM_MspPostInit+0x64>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d11b      	bne.n	8000b06 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_TIM_MspPostInit+0x68>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_TIM_MspPostInit+0x68>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_TIM_MspPostInit+0x68>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_TIM_MspPostInit+0x6c>)
 8000b02:	f001 ffaf 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40012c00 	.word	0x40012c00
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000800 	.word	0x48000800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09a      	sub	sp, #104	; 0x68
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2244      	movs	r2, #68	; 0x44
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f005 faa1 	bl	8006084 <memset>
  if(huart->Instance==USART1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d13d      	bne.n	8000bc8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 fedd 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff fefc 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_UART_MspInit+0xb8>)
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0xb8>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6613      	str	r3, [r2, #96]	; 0x60
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0xb8>)
 8000b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_UART_MspInit+0xb8>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_UART_MspInit+0xb8>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0xb8>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b98:	2330      	movs	r3, #48	; 0x30
 8000b9a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_UART_MspInit+0xbc>)
 8000bb4:	f001 ff56 	bl	8002a64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2025      	movs	r0, #37	; 0x25
 8000bbe:	f001 fe5c 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc2:	2025      	movs	r0, #37	; 0x25
 8000bc4:	f001 fe73 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3768      	adds	r7, #104	; 0x68
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013800 	.word	0x40013800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000800 	.word	0x48000800

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8a4 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <ADC1_2_IRQHandler+0x10>)
 8000c36:	f000 fdc9 	bl	80017cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000028 	.word	0x20000028

08000c44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <USART1_IRQHandler+0x10>)
 8000c4a:	f004 f875 	bl	8004d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000e0 	.word	0x200000e0

08000c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ca6:	f7ff ffd7 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f005 f9c7 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cae:	f7ff fc5f 	bl	8000570 <main>

08000cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   r0, =_estack
 8000cb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc0:	080060fc 	.word	0x080060fc
  ldr r2, =_sbss
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc8:	2000017c 	.word	0x2000017c

08000ccc <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <COMP1_2_3_IRQHandler>

08000cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f001 fdc3 	bl	8002864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f80e 	bl	8000d00 <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf0:	f7ff fe3c 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]

}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_InitTick+0x68>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d022      	beq.n	8000d5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_InitTick+0x68>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fdce 	bl	80028ca <HAL_SYSTICK_Config>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10f      	bne.n	8000d54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b0f      	cmp	r3, #15
 8000d38:	d809      	bhi.n	8000d4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d42:	f001 fd9a 	bl	800287a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_InitTick+0x70>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e007      	b.n	8000d5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e004      	b.n	8000d5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e001      	b.n	8000d5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d84:	6013      	str	r3, [r2, #0]
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000178 	.word	0x20000178
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000178 	.word	0x20000178

08000db0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	609a      	str	r2, [r3, #8]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3360      	adds	r3, #96	; 0x60
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <LL_ADC_SetOffset+0x44>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	4313      	orrs	r3, r2
 8000e48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	03fff000 	.word	0x03fff000

08000e60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3360      	adds	r3, #96	; 0x60
 8000e6e:	461a      	mov	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3360      	adds	r3, #96	; 0x60
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b087      	sub	sp, #28
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3360      	adds	r3, #96	; 0x60
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3360      	adds	r3, #96	; 0x60
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	615a      	str	r2, [r3, #20]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3330      	adds	r3, #48	; 0x30
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	4413      	add	r3, r2
 8000f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	211f      	movs	r1, #31
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	401a      	ands	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0e9b      	lsrs	r3, r3, #26
 8000fb2:	f003 011f 	and.w	r1, r3, #31
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3314      	adds	r3, #20
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	0e5b      	lsrs	r3, r3, #25
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	0d1b      	lsrs	r3, r3, #20
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	2107      	movs	r1, #7
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0d1b      	lsrs	r3, r3, #20
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d10a      	bne.n	800107a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001070:	431a      	orrs	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001078:	e00a      	b.n	8001090 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001086:	43db      	mvns	r3, r3
 8001088:	401a      	ands	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	407f0000 	.word	0x407f0000

080010a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 031f 	and.w	r3, r3, #31
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6093      	str	r3, [r2, #8]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800110c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001110:	d101      	bne.n	8001116 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001138:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001160:	d101      	bne.n	8001166 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001188:	f043 0201 	orr.w	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <LL_ADC_IsEnabled+0x18>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <LL_ADC_IsEnabled+0x1a>
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d6:	f043 0204 	orr.w	r2, r3, #4
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d101      	bne.n	8001202 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b08      	cmp	r3, #8
 8001222:	d101      	bne.n	8001228 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e177      	b.n	8001542 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fba7 	bl	80009b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff3f 	bl	80010fc <LL_ADC_IsDeepPowerDownEnabled>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff25 	bl	80010d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff5a 	bl	800114c <LL_ADC_IsInternalRegulatorEnabled>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff3e 	bl	8001124 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012a8:	4b9c      	ldr	r3, [pc, #624]	; (800151c <HAL_ADC_Init+0x2e4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	4a9c      	ldr	r2, [pc, #624]	; (8001520 <HAL_ADC_Init+0x2e8>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	099b      	lsrs	r3, r3, #6
 80012b6:	3301      	adds	r3, #1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff3c 	bl	800114c <LL_ADC_IsInternalRegulatorEnabled>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10d      	bne.n	80012f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff75 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001300:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8110 	bne.w	8001530 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 810c 	bne.w	8001530 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001320:	f043 0202 	orr.w	r2, r3, #2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff35 	bl	800119c <LL_ADC_IsEnabled>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d111      	bne.n	800135c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001338:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800133c:	f7ff ff2e 	bl	800119c <LL_ADC_IsEnabled>
 8001340:	4604      	mov	r4, r0
 8001342:	4878      	ldr	r0, [pc, #480]	; (8001524 <HAL_ADC_Init+0x2ec>)
 8001344:	f7ff ff2a 	bl	800119c <LL_ADC_IsEnabled>
 8001348:	4603      	mov	r3, r0
 800134a:	4323      	orrs	r3, r4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4619      	mov	r1, r3
 8001356:	4874      	ldr	r0, [pc, #464]	; (8001528 <HAL_ADC_Init+0x2f0>)
 8001358:	f7ff fd2a 	bl	8000db0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7f5b      	ldrb	r3, [r3, #29]
 8001360:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001366:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800136c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001372:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800137a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001386:	2b01      	cmp	r3, #1
 8001388:	d106      	bne.n	8001398 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	3b01      	subs	r3, #1
 8001390:	045b      	lsls	r3, r3, #17
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	4b5c      	ldr	r3, [pc, #368]	; (800152c <HAL_ADC_Init+0x2f4>)
 80013bc:	4013      	ands	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff01 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 80013e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff0e 	bl	8001210 <LL_ADC_INJ_IsConversionOngoing>
 80013f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d16d      	bne.n	80014d8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d16a      	bne.n	80014d8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001406:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800140e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800141e:	f023 0302 	bic.w	r3, r3, #2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	430b      	orrs	r3, r1
 800142a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d017      	beq.n	8001464 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001442:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800144c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6911      	ldr	r1, [r2, #16]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	430b      	orrs	r3, r1
 800145e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001462:	e013      	b.n	800148c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001472:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001488:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001492:	2b01      	cmp	r3, #1
 8001494:	d118      	bne.n	80014c8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014ac:	4311      	orrs	r1, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014b2:	4311      	orrs	r1, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014b8:	430a      	orrs	r2, r1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	e007      	b.n	80014d8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d10c      	bne.n	80014fa <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f023 010f 	bic.w	r1, r3, #15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	1e5a      	subs	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e007      	b.n	800150a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 020f 	bic.w	r2, r2, #15
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	f023 0303 	bic.w	r3, r3, #3
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	65da      	str	r2, [r3, #92]	; 0x5c
 800151a:	e011      	b.n	8001540 <HAL_ADC_Init+0x308>
 800151c:	20000000 	.word	0x20000000
 8001520:	053e2d63 	.word	0x053e2d63
 8001524:	50000100 	.word	0x50000100
 8001528:	50000300 	.word	0x50000300
 800152c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	f043 0210 	orr.w	r2, r3, #16
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001540:	7ffb      	ldrb	r3, [r7, #31]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop

0800154c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001554:	4894      	ldr	r0, [pc, #592]	; (80017a8 <HAL_ADC_Start_IT+0x25c>)
 8001556:	f7ff fda3 	bl	80010a0 <LL_ADC_GetMultimode>
 800155a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fe42 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	f040 8114 	bne.w	8001796 <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_ADC_Start_IT+0x30>
 8001578:	2302      	movs	r3, #2
 800157a:	e111      	b.n	80017a0 <HAL_ADC_Start_IT+0x254>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 ff3f 	bl	8002408 <ADC_Enable>
 800158a:	4603      	mov	r3, r0
 800158c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 80fb 	bne.w	800178c <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7f      	ldr	r2, [pc, #508]	; (80017ac <HAL_ADC_Start_IT+0x260>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d002      	beq.n	80015ba <HAL_ADC_Start_IT+0x6e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	e001      	b.n	80015be <HAL_ADC_Start_IT+0x72>
 80015ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d002      	beq.n	80015cc <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	f023 0206 	bic.w	r2, r3, #6
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	661a      	str	r2, [r3, #96]	; 0x60
 80015f0:	e002      	b.n	80015f8 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	221c      	movs	r2, #28
 80015fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 021c 	bic.w	r2, r2, #28
 8001616:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b08      	cmp	r3, #8
 800161e:	d108      	bne.n	8001632 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0208 	orr.w	r2, r2, #8
 800162e:	605a      	str	r2, [r3, #4]
          break;
 8001630:	e008      	b.n	8001644 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0204 	orr.w	r2, r2, #4
 8001640:	605a      	str	r2, [r3, #4]
          break;
 8001642:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0210 	orr.w	r2, r2, #16
 800165a:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_ADC_Start_IT+0x260>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d002      	beq.n	800166c <HAL_ADC_Start_IT+0x120>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	e001      	b.n	8001670 <HAL_ADC_Start_IT+0x124>
 800166c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4293      	cmp	r3, r2
 8001676:	d008      	beq.n	800168a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b05      	cmp	r3, #5
 8001682:	d002      	beq.n	800168a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b09      	cmp	r3, #9
 8001688:	d13b      	bne.n	8001702 <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d02d      	beq.n	80016f4 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d110      	bne.n	80016d2 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0220 	bic.w	r2, r2, #32
 80016be:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ce:	605a      	str	r2, [r3, #4]
              break;
 80016d0:	e011      	b.n	80016f6 <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0220 	orr.w	r2, r2, #32
 80016f0:	605a      	str	r2, [r3, #4]
              break;
 80016f2:	e000      	b.n	80016f6 <HAL_ADC_Start_IT+0x1aa>
          }
        }
 80016f4:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fd61 	bl	80011c2 <LL_ADC_REG_StartConversion>
 8001700:	e04d      	b.n	800179e <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_ADC_Start_IT+0x260>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d002      	beq.n	800171e <HAL_ADC_Start_IT+0x1d2>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	e001      	b.n	8001722 <HAL_ADC_Start_IT+0x1d6>
 800171e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001722:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d035      	beq.n	800179c <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001738:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d110      	bne.n	800176a <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0220 	bic.w	r2, r2, #32
 8001756:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001766:	605a      	str	r2, [r3, #4]
              break;
 8001768:	e019      	b.n	800179e <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001778:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0220 	orr.w	r2, r2, #32
 8001788:	605a      	str	r2, [r3, #4]
              break;
 800178a:	e008      	b.n	800179e <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001794:	e003      	b.n	800179e <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001796:	2302      	movs	r3, #2
 8001798:	75fb      	strb	r3, [r7, #23]
 800179a:	e000      	b.n	800179e <HAL_ADC_Start_IT+0x252>
        }
 800179c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	50000300 	.word	0x50000300
 80017ac:	50000100 	.word	0x50000100

080017b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017e8:	4883      	ldr	r0, [pc, #524]	; (80019f8 <HAL_ADC_IRQHandler+0x22c>)
 80017ea:	f7ff fc59 	bl	80010a0 <LL_ADC_GetMultimode>
 80017ee:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d017      	beq.n	800182a <HAL_ADC_IRQHandler+0x5e>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d012      	beq.n	800182a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fea3 	bl	8002568 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_ADC_IRQHandler+0x72>
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10a      	bne.n	8001854 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8085 	beq.w	8001954 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d07f      	beq.n	8001954 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb6f 	bl	8000f54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d064      	beq.n	8001946 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a5e      	ldr	r2, [pc, #376]	; (80019fc <HAL_ADC_IRQHandler+0x230>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d002      	beq.n	800188c <HAL_ADC_IRQHandler+0xc0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e001      	b.n	8001890 <HAL_ADC_IRQHandler+0xc4>
 800188c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4293      	cmp	r3, r2
 8001896:	d008      	beq.n	80018aa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d002      	beq.n	80018aa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b09      	cmp	r3, #9
 80018a8:	d104      	bne.n	80018b4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	e00d      	b.n	80018d0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a50      	ldr	r2, [pc, #320]	; (80019fc <HAL_ADC_IRQHandler+0x230>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d002      	beq.n	80018c4 <HAL_ADC_IRQHandler+0xf8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e001      	b.n	80018c8 <HAL_ADC_IRQHandler+0xfc>
 80018c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018c8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d135      	bne.n	8001946 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d12e      	bne.n	8001946 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc7c 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d11a      	bne.n	800192e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020c 	bic.w	r2, r2, #12
 8001906:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d112      	bne.n	8001946 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c
 800192c:	e00b      	b.n	8001946 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	f043 0210 	orr.w	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fde8 	bl	800051c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	220c      	movs	r2, #12
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_ADC_IRQHandler+0x19c>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10b      	bne.n	8001980 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 809e 	beq.w	8001ab0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8098 	beq.w	8001ab0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb18 	bl	8000fd2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80019a2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fad3 	bl	8000f54 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019ae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a11      	ldr	r2, [pc, #68]	; (80019fc <HAL_ADC_IRQHandler+0x230>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d002      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x1f4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	e001      	b.n	80019c4 <HAL_ADC_IRQHandler+0x1f8>
 80019c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d008      	beq.n	80019de <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	d002      	beq.n	80019de <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d104      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
 80019e6:	e011      	b.n	8001a0c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_ADC_IRQHandler+0x230>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d006      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x234>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	e005      	b.n	8001a04 <HAL_ADC_IRQHandler+0x238>
 80019f8:	50000300 	.word	0x50000300
 80019fc:	50000100 	.word	0x50000100
 8001a00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a04:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d047      	beq.n	8001aa2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x260>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d03f      	beq.n	8001aa2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d13a      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a36:	2b40      	cmp	r3, #64	; 0x40
 8001a38:	d133      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d12e      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fbe1 	bl	8001210 <LL_ADC_INJ_IsConversionOngoing>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11a      	bne.n	8001a8a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a62:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d112      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a88:	e00b      	b.n	8001aa2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fd38 	bl	8002518 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2260      	movs	r2, #96	; 0x60
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d011      	beq.n	8001ade <HAL_ADC_IRQHandler+0x312>
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00c      	beq.n	8001ade <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f895 	bl	8001c00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x342>
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00d      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fd1e 	bl	8002540 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d012      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x372>
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fd10 	bl	8002554 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d036      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x3ea>
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d031      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5e:	e014      	b.n	8001b8a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b66:	4825      	ldr	r0, [pc, #148]	; (8001bfc <HAL_ADC_IRQHandler+0x430>)
 8001b68:	f7ff faa8 	bl	80010bc <LL_ADC_GetMultiDMATransfer>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001b72:	2301      	movs	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e008      	b.n	8001b8a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001b86:	2301      	movs	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10e      	bne.n	8001bae <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f833 	bl	8001c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d018      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x426>
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d013      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	f043 0208 	orr.w	r2, r3, #8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fc9d 	bl	800252c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	50000300 	.word	0x50000300

08001c00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b6      	sub	sp, #216	; 0xd8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x22>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e3c8      	b.n	80023dc <HAL_ADC_ConfigChannel+0x7b4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fac7 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 83ad 	bne.w	80023be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	f7ff f982 	bl	8000f7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fab5 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001c80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fac1 	bl	8001210 <LL_ADC_INJ_IsConversionOngoing>
 8001c8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 81d9 	bne.w	800204e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 81d4 	bne.w	800204e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cae:	d10f      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7ff f99c 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f930 	bl	8000f2e <LL_ADC_SetSamplingTimeCommonConfig>
 8001cce:	e00e      	b.n	8001cee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f7ff f98b 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f920 	bl	8000f2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	08db      	lsrs	r3, r3, #3
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d022      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6919      	ldr	r1, [r3, #16]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d20:	f7ff f87a 	bl	8000e18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6919      	ldr	r1, [r3, #16]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	461a      	mov	r2, r3
 8001d32:	f7ff f8c6 	bl	8000ec2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7f1b      	ldrb	r3, [r3, #28]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x124>
 8001d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4a:	e000      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x126>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f7ff f8d2 	bl	8000ef8 <LL_ADC_SetOffsetSaturation>
 8001d54:	e17b      	b.n	800204e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f87f 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x15a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f874 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	0e9b      	lsrs	r3, r3, #26
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	e01e      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x198>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f869 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001da8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001db0:	2320      	movs	r3, #32
 8001db2:	e004      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1b0>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	e018      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x1e2>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001df4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e004      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d106      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f838 	bl	8000e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f81c 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x220>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f811 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	f003 021f 	and.w	r2, r3, #31
 8001e46:	e01e      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x25e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f806 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e004      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x276>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	e018      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x2a8>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001eb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e004      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2101      	movs	r1, #1
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ffd5 	bl	8000e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ffb9 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x2e6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2102      	movs	r1, #2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ffae 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	e01e      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x324>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2102      	movs	r1, #2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ffa3 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	e004      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x33c>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	e016      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x36a>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e004      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d106      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe ff74 	bl	8000e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2103      	movs	r1, #3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe ff58 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x3a8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2103      	movs	r1, #3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe ff4d 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 021f 	and.w	r2, r3, #31
 8001fce:	e017      	b.n	8002000 <HAL_ADC_ConfigChannel+0x3d8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe ff42 	bl	8000e60 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x3f0>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	e011      	b.n	800203c <HAL_ADC_ConfigChannel+0x414>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002028:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800202a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002030:	2320      	movs	r3, #32
 8002032:	e003      	b.n	800203c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	2103      	movs	r1, #3
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ff1f 	bl	8000e8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f8a2 	bl	800119c <LL_ADC_IsEnabled>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8140 	bne.w	80022e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6819      	ldr	r1, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	461a      	mov	r2, r3
 800206e:	f7fe ffef 	bl	8001050 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4a8f      	ldr	r2, [pc, #572]	; (80022b4 <HAL_ADC_ConfigChannel+0x68c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	f040 8131 	bne.w	80022e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x47e>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	3301      	adds	r3, #1
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2b09      	cmp	r3, #9
 800209c:	bf94      	ite	ls
 800209e:	2301      	movls	r3, #1
 80020a0:	2300      	movhi	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	e019      	b.n	80020da <HAL_ADC_ConfigChannel+0x4b2>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80020be:	2320      	movs	r3, #32
 80020c0:	e003      	b.n	80020ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80020c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d079      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x4d2>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0e9b      	lsrs	r3, r3, #26
 80020f0:	3301      	adds	r3, #1
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f8:	e015      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4fe>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800210c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e003      	b.n	800211e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	069b      	lsls	r3, r3, #26
 8002122:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x51e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	3301      	adds	r3, #1
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	e017      	b.n	8002176 <HAL_ADC_ConfigChannel+0x54e>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002156:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e003      	b.n	800216a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	ea42 0103 	orr.w	r1, r2, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10a      	bne.n	800219c <HAL_ADC_ConfigChannel+0x574>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0e9b      	lsrs	r3, r3, #26
 800218c:	3301      	adds	r3, #1
 800218e:	f003 021f 	and.w	r2, r3, #31
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	e018      	b.n	80021ce <HAL_ADC_ConfigChannel+0x5a6>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80021b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 021f 	and.w	r2, r3, #31
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ce:	430b      	orrs	r3, r1
 80021d0:	e081      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d107      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x5c6>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	3301      	adds	r3, #1
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ec:	e015      	b.n	800221a <HAL_ADC_ConfigChannel+0x5f2>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e003      	b.n	8002212 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3301      	adds	r3, #1
 8002214:	069b      	lsls	r3, r3, #26
 8002216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_ADC_ConfigChannel+0x612>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	3301      	adds	r3, #1
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	e017      	b.n	800226a <HAL_ADC_ConfigChannel+0x642>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	61fb      	str	r3, [r7, #28]
  return result;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002252:	2320      	movs	r3, #32
 8002254:	e003      	b.n	800225e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	ea42 0103 	orr.w	r1, r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x66e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	3301      	adds	r3, #1
 8002282:	f003 021f 	and.w	r2, r3, #31
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	3b1e      	subs	r3, #30
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002294:	e01e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x6ac>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	613b      	str	r3, [r7, #16]
  return result;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d104      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e006      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x698>
 80022b2:	bf00      	nop
 80022b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 021f 	and.w	r2, r3, #31
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	3b1e      	subs	r3, #30
 80022ce:	051b      	lsls	r3, r3, #20
 80022d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d4:	430b      	orrs	r3, r1
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	6892      	ldr	r2, [r2, #8]
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fe8c 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d071      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ec:	483e      	ldr	r0, [pc, #248]	; (80023e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80022ee:	f7fe fd85 	bl	8000dfc <LL_ADC_GetCommonPathInternalCh>
 80022f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <HAL_ADC_ConfigChannel+0x7c4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_ADC_ConfigChannel+0x6e2>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d127      	bne.n	800235a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800230a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800230e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d121      	bne.n	800235a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800231e:	d157      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002324:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002328:	4619      	mov	r1, r3
 800232a:	482f      	ldr	r0, [pc, #188]	; (80023e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800232c:	f7fe fd53 	bl	8000dd6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	4a30      	ldr	r2, [pc, #192]	; (80023f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800234a:	e002      	b.n	8002352 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3b01      	subs	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f9      	bne.n	800234c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002358:	e03a      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a27      	ldr	r2, [pc, #156]	; (80023fc <HAL_ADC_ConfigChannel+0x7d4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d113      	bne.n	800238c <HAL_ADC_ConfigChannel+0x764>
 8002364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_ADC_ConfigChannel+0x7d8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02a      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800237a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	4619      	mov	r1, r3
 8002384:	4818      	ldr	r0, [pc, #96]	; (80023e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002386:	f7fe fd26 	bl	8000dd6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238a:	e021      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_ADC_ConfigChannel+0x7dc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d11c      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_ADC_ConfigChannel+0x7d8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d011      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b4:	4619      	mov	r1, r3
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80023b8:	f7fe fd0d 	bl	8000dd6 <LL_ADC_SetCommonPathInternalCh>
 80023bc:	e008      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023dc:	4618      	mov	r0, r3
 80023de:	37d8      	adds	r7, #216	; 0xd8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	80080000 	.word	0x80080000
 80023e8:	50000300 	.word	0x50000300
 80023ec:	c3210000 	.word	0xc3210000
 80023f0:	90c00010 	.word	0x90c00010
 80023f4:	20000000 	.word	0x20000000
 80023f8:	053e2d63 	.word	0x053e2d63
 80023fc:	c7520000 	.word	0xc7520000
 8002400:	50000100 	.word	0x50000100
 8002404:	cb840000 	.word	0xcb840000

08002408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fec1 	bl	800119c <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d14d      	bne.n	80024bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <ADC_Enable+0xc0>)
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00d      	beq.n	800244a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	f043 0210 	orr.w	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e039      	b.n	80024be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fe90 	bl	8001174 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002454:	f7fe fca0 	bl	8000d98 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800245a:	e028      	b.n	80024ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fe9b 	bl	800119c <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fe7f 	bl	8001174 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002476:	f7fe fc8f 	bl	8000d98 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d914      	bls.n	80024ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d00d      	beq.n	80024ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e007      	b.n	80024be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d1cf      	bne.n	800245c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	8000003f 	.word	0x8000003f

080024cc <LL_ADC_IsEnabled>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <LL_ADC_IsEnabled+0x18>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <LL_ADC_IsEnabled+0x1a>
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d101      	bne.n	800250a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b0a1      	sub	sp, #132	; 0x84
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002596:	2302      	movs	r3, #2
 8002598:	e08b      	b.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80025a2:	2300      	movs	r3, #0
 80025a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80025a6:	2300      	movs	r3, #0
 80025a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b2:	d102      	bne.n	80025ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	e001      	b.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e06a      	b.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff87 	bl	80024f2 <LL_ADC_REG_IsConversionOngoing>
 80025e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff81 	bl	80024f2 <LL_ADC_REG_IsConversionOngoing>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d14c      	bne.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d149      	bne.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025fc:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80025fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d028      	beq.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800261a:	035b      	lsls	r3, r3, #13
 800261c:	430b      	orrs	r3, r1
 800261e:	431a      	orrs	r2, r3
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002624:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002628:	f7ff ff50 	bl	80024cc <LL_ADC_IsEnabled>
 800262c:	4604      	mov	r4, r0
 800262e:	4823      	ldr	r0, [pc, #140]	; (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002630:	f7ff ff4c 	bl	80024cc <LL_ADC_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	4323      	orrs	r3, r4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d133      	bne.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002644:	f023 030f 	bic.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	6892      	ldr	r2, [r2, #8]
 8002650:	430a      	orrs	r2, r1
 8002652:	431a      	orrs	r2, r3
 8002654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002656:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002658:	e024      	b.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800265a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002664:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002666:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800266a:	f7ff ff2f 	bl	80024cc <LL_ADC_IsEnabled>
 800266e:	4604      	mov	r4, r0
 8002670:	4812      	ldr	r0, [pc, #72]	; (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002672:	f7ff ff2b 	bl	80024cc <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	4323      	orrs	r3, r4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d112      	bne.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800267e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002686:	f023 030f 	bic.w	r3, r3, #15
 800268a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800268c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800268e:	e009      	b.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026a2:	e000      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3784      	adds	r7, #132	; 0x84
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	50000100 	.word	0x50000100
 80026c0:	50000300 	.word	0x50000300

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <__NVIC_EnableIRQ+0x38>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f1c3 0307 	rsb	r3, r3, #7
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf28      	it	cs
 80027d6:	2304      	movcs	r3, #4
 80027d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3304      	adds	r3, #4
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d902      	bls.n	80027e8 <NVIC_EncodePriority+0x30>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	e000      	b.n	80027ea <NVIC_EncodePriority+0x32>
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43d9      	mvns	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	4313      	orrs	r3, r2
         );
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002830:	d301      	bcc.n	8002836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2301      	movs	r3, #1
 8002834:	e00f      	b.n	8002856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <SysTick_Config+0x40>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283e:	210f      	movs	r1, #15
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f7ff ff8e 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SysTick_Config+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <SysTick_Config+0x40>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010

08002864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff29 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002888:	f7ff ff40 	bl	800270c <__NVIC_GetPriorityGrouping>
 800288c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff90 	bl	80027b8 <NVIC_EncodePriority>
 8002898:	4602      	mov	r2, r0
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5f 	bl	8002764 <__NVIC_SetPriority>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff33 	bl	8002728 <__NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffa4 	bl	8002820 <SysTick_Config>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d005      	beq.n	8002906 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2204      	movs	r2, #4
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e037      	b.n	8002976 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 020e 	bic.w	r2, r2, #14
 8002914:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002924:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002952:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002974:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d00d      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e047      	b.n	8002a58 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020e 	bic.w	r2, r2, #14
 80029d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
    }
  }
  return status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a72:	e15a      	b.n	8002d2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 814c 	beq.w	8002d24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d005      	beq.n	8002aa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d130      	bne.n	8002b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ada:	2201      	movs	r2, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f003 0201 	and.w	r2, r3, #1
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d017      	beq.n	8002b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d123      	bne.n	8002b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	220f      	movs	r2, #15
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	08da      	lsrs	r2, r3, #3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3208      	adds	r2, #8
 8002b90:	6939      	ldr	r1, [r7, #16]
 8002b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0203 	and.w	r2, r3, #3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80a6 	beq.w	8002d24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd8:	4b5b      	ldr	r3, [pc, #364]	; (8002d48 <HAL_GPIO_Init+0x2e4>)
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	4a5a      	ldr	r2, [pc, #360]	; (8002d48 <HAL_GPIO_Init+0x2e4>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6613      	str	r3, [r2, #96]	; 0x60
 8002be4:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_GPIO_Init+0x2e4>)
 8002be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf0:	4a56      	ldr	r2, [pc, #344]	; (8002d4c <HAL_GPIO_Init+0x2e8>)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c1a:	d01f      	beq.n	8002c5c <HAL_GPIO_Init+0x1f8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_GPIO_Init+0x2ec>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d019      	beq.n	8002c58 <HAL_GPIO_Init+0x1f4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <HAL_GPIO_Init+0x2f0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_GPIO_Init+0x1f0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a4a      	ldr	r2, [pc, #296]	; (8002d58 <HAL_GPIO_Init+0x2f4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00d      	beq.n	8002c50 <HAL_GPIO_Init+0x1ec>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a49      	ldr	r2, [pc, #292]	; (8002d5c <HAL_GPIO_Init+0x2f8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <HAL_GPIO_Init+0x1e8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_GPIO_Init+0x2fc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_GPIO_Init+0x1e4>
 8002c44:	2305      	movs	r3, #5
 8002c46:	e00a      	b.n	8002c5e <HAL_GPIO_Init+0x1fa>
 8002c48:	2306      	movs	r3, #6
 8002c4a:	e008      	b.n	8002c5e <HAL_GPIO_Init+0x1fa>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	e006      	b.n	8002c5e <HAL_GPIO_Init+0x1fa>
 8002c50:	2303      	movs	r3, #3
 8002c52:	e004      	b.n	8002c5e <HAL_GPIO_Init+0x1fa>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e002      	b.n	8002c5e <HAL_GPIO_Init+0x1fa>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_GPIO_Init+0x1fa>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	4093      	lsls	r3, r2
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6e:	4937      	ldr	r1, [pc, #220]	; (8002d4c <HAL_GPIO_Init+0x2e8>)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c7c:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ca0:	4a30      	ldr	r2, [pc, #192]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cca:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d1e:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3301      	adds	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f47f ae9d 	bne.w	8002a74 <HAL_GPIO_Init+0x10>
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	48000400 	.word	0x48000400
 8002d54:	48000800 	.word	0x48000800
 8002d58:	48000c00 	.word	0x48000c00
 8002d5c:	48001000 	.word	0x48001000
 8002d60:	48001400 	.word	0x48001400
 8002d64:	40010400 	.word	0x40010400

08002d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d141      	bne.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d131      	bne.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d84:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8a:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d94:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d9c:	4a41      	ldr	r2, [pc, #260]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002da4:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2232      	movs	r2, #50	; 0x32
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	4a3f      	ldr	r2, [pc, #252]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	0c9b      	lsrs	r3, r3, #18
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dba:	e002      	b.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc2:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dce:	d102      	bne.n	8002dd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f2      	bne.n	8002dbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de2:	d158      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e057      	b.n	8002e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dee:	4a2d      	ldr	r2, [pc, #180]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002df8:	e04d      	b.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d141      	bne.n	8002e86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0e:	d131      	bne.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e16:	4a23      	ldr	r2, [pc, #140]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e28:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2232      	movs	r2, #50	; 0x32
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	0c9b      	lsrs	r3, r3, #18
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e46:	e002      	b.n	8002e4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5a:	d102      	bne.n	8002e62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f2      	bne.n	8002e48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d112      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e011      	b.n	8002e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e84:	e007      	b.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	431bde83 	.word	0x431bde83

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e306      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ece:	4b97      	ldr	r3, [pc, #604]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed8:	4b94      	ldr	r3, [pc, #592]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0x3e>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x44>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	4b8d      	ldr	r3, [pc, #564]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x108>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d157      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e2e1      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x74>
 8002f16:	4b85      	ldr	r3, [pc, #532]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a84      	ldr	r2, [pc, #528]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x98>
 8002f2e:	4b7f      	ldr	r3, [pc, #508]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7e      	ldr	r2, [pc, #504]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b7c      	ldr	r3, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7b      	ldr	r2, [pc, #492]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f48:	4b78      	ldr	r3, [pc, #480]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a77      	ldr	r2, [pc, #476]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b75      	ldr	r3, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a74      	ldr	r2, [pc, #464]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fd ff16 	bl	8000d98 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fd ff12 	bl	8000d98 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e2a6      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f82:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xc0>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fd ff02 	bl	8000d98 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fd fefe 	bl	8000d98 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e292      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002faa:	4b60      	ldr	r3, [pc, #384]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0xe8>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d075      	beq.n	80030b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc6:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd0:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x136>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_OscConfig+0x13c>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d11f      	bne.n	800302c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_OscConfig+0x154>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e265      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003004:	4b49      	ldr	r3, [pc, #292]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	4946      	ldr	r1, [pc, #280]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003018:	4b45      	ldr	r3, [pc, #276]	; (8003130 <HAL_RCC_OscConfig+0x280>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fe6f 	bl	8000d00 <HAL_InitTick>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d043      	beq.n	80030b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e251      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d023      	beq.n	800307c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003034:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3c      	ldr	r2, [pc, #240]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fd feaa 	bl	8000d98 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003048:	f7fd fea6 	bl	8000d98 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e23a      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	492d      	ldr	r1, [pc, #180]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
 800307a:	e01a      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2a      	ldr	r2, [pc, #168]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd fe86 	bl	8000d98 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003090:	f7fd fe82 	bl	8000d98 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e216      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a2:	4b22      	ldr	r3, [pc, #136]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1e0>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d041      	beq.n	8003142 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01c      	beq.n	8003100 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 80030c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030cc:	4a17      	ldr	r2, [pc, #92]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fd fe5f 	bl	8000d98 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030de:	f7fd fe5b 	bl	8000d98 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e1ef      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 80030f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ef      	beq.n	80030de <HAL_RCC_OscConfig+0x22e>
 80030fe:	e020      	b.n	8003142 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fd fe42 	bl	8000d98 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003116:	e00d      	b.n	8003134 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7fd fe3e 	bl	8000d98 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d906      	bls.n	8003134 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1d2      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003134:	4b8c      	ldr	r3, [pc, #560]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ea      	bne.n	8003118 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a6 	beq.w	800329c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003154:	4b84      	ldr	r3, [pc, #528]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_OscConfig+0x2b4>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x2b6>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	4a7e      	ldr	r2, [pc, #504]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
 8003176:	4b7c      	ldr	r3, [pc, #496]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003186:	4b79      	ldr	r3, [pc, #484]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003192:	4b76      	ldr	r3, [pc, #472]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a75      	ldr	r2, [pc, #468]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fd fdfb 	bl	8000d98 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a6:	f7fd fdf7 	bl	8000d98 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e18b      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b6c      	ldr	r3, [pc, #432]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d108      	bne.n	80031de <HAL_RCC_OscConfig+0x32e>
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a65      	ldr	r2, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031dc:	e024      	b.n	8003228 <HAL_RCC_OscConfig+0x378>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d110      	bne.n	8003208 <HAL_RCC_OscConfig+0x358>
 80031e6:	4b60      	ldr	r3, [pc, #384]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031f6:	4b5c      	ldr	r3, [pc, #368]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003206:	e00f      	b.n	8003228 <HAL_RCC_OscConfig+0x378>
 8003208:	4b57      	ldr	r3, [pc, #348]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	4a56      	ldr	r2, [pc, #344]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d016      	beq.n	800325e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fd fdb2 	bl	8000d98 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fd fdae 	bl	8000d98 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e140      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ed      	beq.n	8003238 <HAL_RCC_OscConfig+0x388>
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fd fd9b 	bl	8000d98 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fd fd97 	bl	8000d98 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e129      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ed      	bne.n	8003266 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800328a:	7ffb      	ldrb	r3, [r7, #31]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	4a34      	ldr	r2, [pc, #208]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d03c      	beq.n	8003322 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01c      	beq.n	80032ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032b0:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b6:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fd fd6a 	bl	8000d98 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c8:	f7fd fd66 	bl	8000d98 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0fa      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032da:	4b23      	ldr	r3, [pc, #140]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80032dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ef      	beq.n	80032c8 <HAL_RCC_OscConfig+0x418>
 80032e8:	e01b      	b.n	8003322 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ea:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80032ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fd fd4d 	bl	8000d98 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003302:	f7fd fd49 	bl	8000d98 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0dd      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1ef      	bne.n	8003302 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80d1 	beq.w	80034ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b0c      	cmp	r3, #12
 8003336:	f000 808b 	beq.w	8003450 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d15e      	bne.n	8003400 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fd fd23 	bl	8000d98 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003354:	e00c      	b.n	8003370 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fd fd1f 	bl	8000d98 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d905      	bls.n	8003370 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0b3      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003370:	4b59      	ldr	r3, [pc, #356]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ec      	bne.n	8003356 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337c:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_RCC_OscConfig+0x62c>)
 8003382:	4013      	ands	r3, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6a11      	ldr	r1, [r2, #32]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338c:	3a01      	subs	r2, #1
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003396:	0212      	lsls	r2, r2, #8
 8003398:	4311      	orrs	r1, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800339e:	0852      	lsrs	r2, r2, #1
 80033a0:	3a01      	subs	r2, #1
 80033a2:	0552      	lsls	r2, r2, #21
 80033a4:	4311      	orrs	r1, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033aa:	0852      	lsrs	r2, r2, #1
 80033ac:	3a01      	subs	r2, #1
 80033ae:	0652      	lsls	r2, r2, #25
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033b6:	06d2      	lsls	r2, r2, #27
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4947      	ldr	r1, [pc, #284]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c0:	4b45      	ldr	r3, [pc, #276]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a44      	ldr	r2, [pc, #272]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033cc:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a41      	ldr	r2, [pc, #260]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd fcde 	bl	8000d98 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fd fcda 	bl	8000d98 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e06e      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x530>
 80033fe:	e066      	b.n	80034ce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 8003406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a31      	ldr	r2, [pc, #196]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a2e      	ldr	r2, [pc, #184]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 800341e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003426:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd fcb6 	bl	8000d98 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fd fcb2 	bl	8000d98 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e046      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003442:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x580>
 800344e:	e03e      	b.n	80034ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e039      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800345c:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <HAL_RCC_OscConfig+0x628>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	429a      	cmp	r2, r3
 800346e:	d12c      	bne.n	80034ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	3b01      	subs	r3, #1
 800347c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d123      	bne.n	80034ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d11b      	bne.n	80034ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d113      	bne.n	80034ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	3b01      	subs	r3, #1
 80034b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	019f800c 	.word	0x019f800c

080034e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e11e      	b.n	8003736 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b91      	ldr	r3, [pc, #580]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b8e      	ldr	r3, [pc, #568]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 020f 	bic.w	r2, r3, #15
 800350e:	498c      	ldr	r1, [pc, #560]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b8a      	ldr	r3, [pc, #552]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e106      	b.n	8003736 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d073      	beq.n	800361c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d129      	bne.n	8003590 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353c:	4b81      	ldr	r3, [pc, #516]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0f4      	b.n	8003736 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800354c:	f000 f99e 	bl	800388c <RCC_GetSysClockFreqFromPLLSource>
 8003550:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4a7c      	ldr	r2, [pc, #496]	; (8003748 <HAL_RCC_ClockConfig+0x268>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d93f      	bls.n	80035da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800355a:	4b7a      	ldr	r3, [pc, #488]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800356e:	2b00      	cmp	r3, #0
 8003570:	d033      	beq.n	80035da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d12f      	bne.n	80035da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800357a:	4b72      	ldr	r3, [pc, #456]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003582:	4a70      	ldr	r2, [pc, #448]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e024      	b.n	80035da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0c6      	b.n	8003736 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0be      	b.n	8003736 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035b8:	f000 f8ce 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4a61      	ldr	r2, [pc, #388]	; (8003748 <HAL_RCC_ClockConfig+0x268>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d909      	bls.n	80035da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035c6:	4b5f      	ldr	r3, [pc, #380]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ce:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b5a      	ldr	r3, [pc, #360]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4957      	ldr	r1, [pc, #348]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fd fbd4 	bl	8000d98 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fd fbd0 	bl	8000d98 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e095      	b.n	8003736 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b4e      	ldr	r3, [pc, #312]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d023      	beq.n	8003670 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a42      	ldr	r2, [pc, #264]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800363a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800363e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800364c:	4b3d      	ldr	r3, [pc, #244]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003654:	4a3b      	ldr	r2, [pc, #236]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 8003656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800365a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b39      	ldr	r3, [pc, #228]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4936      	ldr	r1, [pc, #216]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
 800366e:	e008      	b.n	8003682 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d105      	bne.n	8003682 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4a32      	ldr	r2, [pc, #200]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 800367c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003680:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d21d      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 020f 	bic.w	r2, r3, #15
 8003698:	4929      	ldr	r1, [pc, #164]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036a0:	f7fd fb7a 	bl	8000d98 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fd fb76 	bl	8000d98 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e03b      	b.n	8003736 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_ClockConfig+0x260>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1ed      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4917      	ldr	r1, [pc, #92]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490f      	ldr	r1, [pc, #60]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800370a:	f000 f825 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 800370e:	4602      	mov	r2, r0
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <HAL_RCC_ClockConfig+0x264>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	490c      	ldr	r1, [pc, #48]	; (800374c <HAL_RCC_ClockConfig+0x26c>)
 800371c:	5ccb      	ldrb	r3, [r1, r3]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x270>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fae6 	bl	8000d00 <HAL_InitTick>
 8003734:	4603      	mov	r3, r0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40022000 	.word	0x40022000
 8003744:	40021000 	.word	0x40021000
 8003748:	04c4b400 	.word	0x04c4b400
 800374c:	080060ac 	.word	0x080060ac
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b04      	cmp	r3, #4
 8003768:	d102      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_RCC_GetSysClockFreq+0xbc>)
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e047      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003770:	4b27      	ldr	r3, [pc, #156]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d102      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800377c:	4b26      	ldr	r3, [pc, #152]	; (8003818 <HAL_RCC_GetSysClockFreq+0xc0>)
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	e03e      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d136      	bne.n	80037fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003798:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	3301      	adds	r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d10c      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037ac:	4a1a      	ldr	r2, [pc, #104]	; (8003818 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b6:	68d2      	ldr	r2, [r2, #12]
 80037b8:	0a12      	lsrs	r2, r2, #8
 80037ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
      break;
 80037c4:	e00c      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	0a12      	lsrs	r2, r2, #8
 80037d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037d8:	fb02 f303 	mul.w	r3, r2, r3
 80037dc:	617b      	str	r3, [r7, #20]
      break;
 80037de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	0e5b      	lsrs	r3, r3, #25
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	3301      	adds	r3, #1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e001      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003800:	693b      	ldr	r3, [r7, #16]
}
 8003802:	4618      	mov	r0, r3
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	00f42400 	.word	0x00f42400
 8003818:	016e3600 	.word	0x016e3600

0800381c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_RCC_GetHCLKFreq+0x14>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000000 	.word	0x20000000

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003838:	f7ff fff0 	bl	800381c <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4904      	ldr	r1, [pc, #16]	; (800385c <HAL_RCC_GetPCLK1Freq+0x28>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	080060bc 	.word	0x080060bc

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003864:	f7ff ffda 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0adb      	lsrs	r3, r3, #11
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	080060bc 	.word	0x080060bc

0800388c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d10c      	bne.n	80038ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038ba:	68d2      	ldr	r2, [r2, #12]
 80038bc:	0a12      	lsrs	r2, r2, #8
 80038be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]
    break;
 80038c8:	e00c      	b.n	80038e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	0a12      	lsrs	r2, r2, #8
 80038d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
    break;
 80038e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0e5b      	lsrs	r3, r3, #25
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	3301      	adds	r3, #1
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80038fe:	687b      	ldr	r3, [r7, #4]
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40021000 	.word	0x40021000
 8003910:	016e3600 	.word	0x016e3600
 8003914:	00f42400 	.word	0x00f42400

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003920:	2300      	movs	r3, #0
 8003922:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003924:	2300      	movs	r3, #0
 8003926:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8098 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393a:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	6593      	str	r3, [r2, #88]	; 0x58
 8003952:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395e:	2301      	movs	r3, #1
 8003960:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003962:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800396e:	f7fd fa13 	bl	8000d98 <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003974:	e009      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003976:	f7fd fa0f 	bl	8000d98 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d902      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	74fb      	strb	r3, [r7, #19]
        break;
 8003988:	e005      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ef      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d159      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800399c:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d019      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd f9cf 	bl	8000d98 <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fc:	e00b      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd f9cb 	bl	8000d98 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d902      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	74fb      	strb	r3, [r7, #19]
            break;
 8003a14:	e006      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ec      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	4903      	ldr	r1, [pc, #12]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	74bb      	strb	r3, [r7, #18]
 8003a46:	e005      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a54:	7c7b      	ldrb	r3, [r7, #17]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5a:	4ba6      	ldr	r3, [pc, #664]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	4aa5      	ldr	r2, [pc, #660]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a72:	4ba0      	ldr	r3, [pc, #640]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 0203 	bic.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	499c      	ldr	r1, [pc, #624]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a94:	4b97      	ldr	r3, [pc, #604]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f023 020c 	bic.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4994      	ldr	r1, [pc, #592]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ab6:	4b8f      	ldr	r3, [pc, #572]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	498b      	ldr	r1, [pc, #556]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ad8:	4b86      	ldr	r3, [pc, #536]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	4983      	ldr	r1, [pc, #524]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003afa:	4b7e      	ldr	r3, [pc, #504]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	497a      	ldr	r1, [pc, #488]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b1c:	4b75      	ldr	r3, [pc, #468]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	4972      	ldr	r1, [pc, #456]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4969      	ldr	r1, [pc, #420]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b60:	4b64      	ldr	r3, [pc, #400]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4961      	ldr	r1, [pc, #388]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b82:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	4958      	ldr	r1, [pc, #352]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba4:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	4950      	ldr	r1, [pc, #320]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d015      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	4942      	ldr	r1, [pc, #264]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a3c      	ldr	r2, [pc, #240]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d015      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c14:	4b37      	ldr	r3, [pc, #220]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4934      	ldr	r1, [pc, #208]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c32:	d105      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c34:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a2e      	ldr	r2, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c4c:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	4926      	ldr	r1, [pc, #152]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	4918      	ldr	r1, [pc, #96]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ce8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e049      	b.n	8003d9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fc fea4 	bl	8000a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 fa4a 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_TIM_PWM_Start+0x24>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e03c      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d109      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x3e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e02f      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_PWM_Start+0x58>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e022      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d109      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x72>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e015      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d109      	bne.n	8003e34 <HAL_TIM_PWM_Start+0x8c>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e008      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e097      	b.n	8003f7e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0xb6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	e023      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xc6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6c:	e01b      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xd6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e7c:	e013      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xe6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e8c:	e00b      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0xf6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9c:	e003      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fd14 	bl	80048dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a33      	ldr	r2, [pc, #204]	; (8003f88 <HAL_TIM_PWM_Start+0x1e0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <HAL_TIM_PWM_Start+0x1e4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a30      	ldr	r2, [pc, #192]	; (8003f90 <HAL_TIM_PWM_Start+0x1e8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2f      	ldr	r2, [pc, #188]	; (8003f94 <HAL_TIM_PWM_Start+0x1ec>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	; (8003f98 <HAL_TIM_PWM_Start+0x1f0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_PWM_Start+0x142>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_PWM_Start+0x144>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_TIM_PWM_Start+0x1e0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_TIM_PWM_Start+0x194>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d013      	beq.n	8003f3c <HAL_TIM_PWM_Start+0x194>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <HAL_TIM_PWM_Start+0x1f4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_TIM_PWM_Start+0x194>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <HAL_TIM_PWM_Start+0x1f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_TIM_PWM_Start+0x194>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <HAL_TIM_PWM_Start+0x1e4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_TIM_PWM_Start+0x194>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a16      	ldr	r2, [pc, #88]	; (8003f90 <HAL_TIM_PWM_Start+0x1e8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d115      	bne.n	8003f68 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <HAL_TIM_PWM_Start+0x1fc>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	d015      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x1d2>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d011      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f66:	e008      	b.n	8003f7a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e000      	b.n	8003f7c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	40014000 	.word	0x40014000
 8003f94:	40014400 	.word	0x40014400
 8003f98:	40014800 	.word	0x40014800
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	00010007 	.word	0x00010007

08003fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0ff      	b.n	80041c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b14      	cmp	r3, #20
 8003fd2:	f200 80f0 	bhi.w	80041b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fd6:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fdc:	08004031 	.word	0x08004031
 8003fe0:	080041b7 	.word	0x080041b7
 8003fe4:	080041b7 	.word	0x080041b7
 8003fe8:	080041b7 	.word	0x080041b7
 8003fec:	08004071 	.word	0x08004071
 8003ff0:	080041b7 	.word	0x080041b7
 8003ff4:	080041b7 	.word	0x080041b7
 8003ff8:	080041b7 	.word	0x080041b7
 8003ffc:	080040b3 	.word	0x080040b3
 8004000:	080041b7 	.word	0x080041b7
 8004004:	080041b7 	.word	0x080041b7
 8004008:	080041b7 	.word	0x080041b7
 800400c:	080040f3 	.word	0x080040f3
 8004010:	080041b7 	.word	0x080041b7
 8004014:	080041b7 	.word	0x080041b7
 8004018:	080041b7 	.word	0x080041b7
 800401c:	08004135 	.word	0x08004135
 8004020:	080041b7 	.word	0x080041b7
 8004024:	080041b7 	.word	0x080041b7
 8004028:	080041b7 	.word	0x080041b7
 800402c:	08004175 	.word	0x08004175
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f95a 	bl	80042f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	619a      	str	r2, [r3, #24]
      break;
 800406e:	e0a5      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f9ca 	bl	8004410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800408a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	619a      	str	r2, [r3, #24]
      break;
 80040b0:	e084      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa33 	bl	8004524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0208 	orr.w	r2, r2, #8
 80040cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69d9      	ldr	r1, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	61da      	str	r2, [r3, #28]
      break;
 80040f0:	e064      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fa9b 	bl	8004634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69d9      	ldr	r1, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	021a      	lsls	r2, r3, #8
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	61da      	str	r2, [r3, #28]
      break;
 8004132:	e043      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fb04 	bl	8004748 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004172:	e023      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fb48 	bl	8004810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80041b4:	e002      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop

080041d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3c      	ldr	r2, [pc, #240]	; (80042d4 <TIM_Base_SetConfig+0x104>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00f      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d00b      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a39      	ldr	r2, [pc, #228]	; (80042d8 <TIM_Base_SetConfig+0x108>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d007      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a38      	ldr	r2, [pc, #224]	; (80042dc <TIM_Base_SetConfig+0x10c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a37      	ldr	r2, [pc, #220]	; (80042e0 <TIM_Base_SetConfig+0x110>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2d      	ldr	r2, [pc, #180]	; (80042d4 <TIM_Base_SetConfig+0x104>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01b      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004228:	d017      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <TIM_Base_SetConfig+0x108>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a29      	ldr	r2, [pc, #164]	; (80042dc <TIM_Base_SetConfig+0x10c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00f      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <TIM_Base_SetConfig+0x110>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00b      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <TIM_Base_SetConfig+0x114>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d007      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <TIM_Base_SetConfig+0x118>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d003      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a25      	ldr	r2, [pc, #148]	; (80042ec <TIM_Base_SetConfig+0x11c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d108      	bne.n	800426c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <TIM_Base_SetConfig+0x104>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00f      	beq.n	80042b8 <TIM_Base_SetConfig+0xe8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <TIM_Base_SetConfig+0x110>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_Base_SetConfig+0xe8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <TIM_Base_SetConfig+0x114>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0xe8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0f      	ldr	r2, [pc, #60]	; (80042e8 <TIM_Base_SetConfig+0x118>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0xe8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <TIM_Base_SetConfig+0x11c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d103      	bne.n	80042c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	615a      	str	r2, [r3, #20]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40013400 	.word	0x40013400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800

080042f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 0302 	bic.w	r3, r3, #2
 800433c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <TIM_OC1_SetConfig+0x10c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00f      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <TIM_OC1_SetConfig+0x110>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00b      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <TIM_OC1_SetConfig+0x114>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d007      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <TIM_OC1_SetConfig+0x118>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a28      	ldr	r2, [pc, #160]	; (800440c <TIM_OC1_SetConfig+0x11c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10c      	bne.n	800438a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0308 	bic.w	r3, r3, #8
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <TIM_OC1_SetConfig+0x10c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <TIM_OC1_SetConfig+0x110>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <TIM_OC1_SetConfig+0x114>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <TIM_OC1_SetConfig+0x118>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a17      	ldr	r2, [pc, #92]	; (800440c <TIM_OC1_SetConfig+0x11c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d111      	bne.n	80043d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40013400 	.word	0x40013400
 8004404:	40014000 	.word	0x40014000
 8004408:	40014400 	.word	0x40014400
 800440c:	40014800 	.word	0x40014800

08004410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0210 	bic.w	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0320 	bic.w	r3, r3, #32
 800445e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <TIM_OC2_SetConfig+0x100>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC2_SetConfig+0x6c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a27      	ldr	r2, [pc, #156]	; (8004514 <TIM_OC2_SetConfig+0x104>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10d      	bne.n	8004498 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004496:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <TIM_OC2_SetConfig+0x100>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00f      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <TIM_OC2_SetConfig+0x104>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <TIM_OC2_SetConfig+0x108>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a1a      	ldr	r2, [pc, #104]	; (800451c <TIM_OC2_SetConfig+0x10c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a19      	ldr	r2, [pc, #100]	; (8004520 <TIM_OC2_SetConfig+0x110>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d113      	bne.n	80044e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40013400 	.word	0x40013400
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a27      	ldr	r2, [pc, #156]	; (8004620 <TIM_OC3_SetConfig+0xfc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_OC3_SetConfig+0x6a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <TIM_OC3_SetConfig+0x100>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10d      	bne.n	80045aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <TIM_OC3_SetConfig+0xfc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <TIM_OC3_SetConfig+0x100>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <TIM_OC3_SetConfig+0x104>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <TIM_OC3_SetConfig+0x108>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a18      	ldr	r2, [pc, #96]	; (8004630 <TIM_OC3_SetConfig+0x10c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d113      	bne.n	80045fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40013400 	.word	0x40013400
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a28      	ldr	r2, [pc, #160]	; (8004734 <TIM_OC4_SetConfig+0x100>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC4_SetConfig+0x6c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a27      	ldr	r2, [pc, #156]	; (8004738 <TIM_OC4_SetConfig+0x104>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10d      	bne.n	80046bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <TIM_OC4_SetConfig+0x100>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00f      	beq.n	80046e4 <TIM_OC4_SetConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <TIM_OC4_SetConfig+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_OC4_SetConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <TIM_OC4_SetConfig+0x108>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_OC4_SetConfig+0xb0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <TIM_OC4_SetConfig+0x10c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_OC4_SetConfig+0xb0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a19      	ldr	r2, [pc, #100]	; (8004744 <TIM_OC4_SetConfig+0x110>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d113      	bne.n	800470c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	019b      	lsls	r3, r3, #6
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40013400 	.word	0x40013400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800478c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a17      	ldr	r2, [pc, #92]	; (80047fc <TIM_OC5_SetConfig+0xb4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00f      	beq.n	80047c2 <TIM_OC5_SetConfig+0x7a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a16      	ldr	r2, [pc, #88]	; (8004800 <TIM_OC5_SetConfig+0xb8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <TIM_OC5_SetConfig+0x7a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a15      	ldr	r2, [pc, #84]	; (8004804 <TIM_OC5_SetConfig+0xbc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <TIM_OC5_SetConfig+0x7a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a14      	ldr	r2, [pc, #80]	; (8004808 <TIM_OC5_SetConfig+0xc0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d003      	beq.n	80047c2 <TIM_OC5_SetConfig+0x7a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <TIM_OC5_SetConfig+0xc4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d109      	bne.n	80047d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40013400 	.word	0x40013400
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800

08004810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800483e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	051b      	lsls	r3, r3, #20
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <TIM_OC6_SetConfig+0xb8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_OC6_SetConfig+0x7c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a17      	ldr	r2, [pc, #92]	; (80048cc <TIM_OC6_SetConfig+0xbc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_OC6_SetConfig+0x7c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a16      	ldr	r2, [pc, #88]	; (80048d0 <TIM_OC6_SetConfig+0xc0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_OC6_SetConfig+0x7c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <TIM_OC6_SetConfig+0xc4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC6_SetConfig+0x7c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <TIM_OC6_SetConfig+0xc8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d109      	bne.n	80048a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	029b      	lsls	r3, r3, #10
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40013400 	.word	0x40013400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40014800 	.word	0x40014800

080048dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2201      	movs	r2, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e065      	b.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d108      	bne.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800497a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800498c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d018      	beq.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d013      	beq.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00e      	beq.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d009      	beq.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10c      	bne.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40013400 	.word	0x40013400
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40014000 	.word	0x40014000

08004a2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e087      	b.n	8004b58 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d106      	bne.n	8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d126      	bne.n	8004b46 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	051b      	lsls	r3, r3, #20
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d106      	bne.n	8004b46 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40013400 	.word	0x40013400

08004b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e042      	b.n	8004c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fb ffc3 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2224      	movs	r2, #36	; 0x24
 8004b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fbfa 	bl	80053a8 <UART_SetConfig>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e022      	b.n	8004c04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 feba 	bl	8005940 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 ff41 	bl	8005a84 <UART_CheckIdleState>
 8004c02:	4603      	mov	r3, r0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	f040 8083 	bne.w	8004d2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_Transmit+0x28>
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e07b      	b.n	8004d30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_UART_Transmit+0x3a>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e074      	b.n	8004d30 <HAL_UART_Transmit+0x124>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	; 0x21
 8004c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc f89b 	bl	8000d98 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7c:	d108      	bne.n	8004c90 <HAL_UART_Transmit+0x84>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ca0:	e02c      	b.n	8004cfc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2180      	movs	r1, #128	; 0x80
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 ff34 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e039      	b.n	8004d30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e007      	b.n	8004cea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1cc      	bne.n	8004ca2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2140      	movs	r1, #64	; 0x40
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 ff01 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e006      	b.n	8004d30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e000      	b.n	8004d30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
  }
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b0ba      	sub	sp, #232	; 0xe8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d62:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d66:	4013      	ands	r3, r2
 8004d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11b      	bne.n	8004dac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d015      	beq.n	8004dac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 82d6 	beq.w	800534e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
      }
      return;
 8004daa:	e2d0      	b.n	800534e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 811f 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004db6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004dba:	4b8b      	ldr	r3, [pc, #556]	; (8004fe8 <HAL_UART_IRQHandler+0x2b0>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004dc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004dc6:	4b89      	ldr	r3, [pc, #548]	; (8004fec <HAL_UART_IRQHandler+0x2b4>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8112 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d011      	beq.n	8004e00 <HAL_UART_IRQHandler+0xc8>
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00b      	beq.n	8004e00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d011      	beq.n	8004e30 <HAL_UART_IRQHandler+0xf8>
 8004e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d011      	beq.n	8004e60 <HAL_UART_IRQHandler+0x128>
 8004e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e56:	f043 0202 	orr.w	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d017      	beq.n	8004e9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004e7c:	4b5a      	ldr	r3, [pc, #360]	; (8004fe8 <HAL_UART_IRQHandler+0x2b0>)
 8004e7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e92:	f043 0208 	orr.w	r2, r3, #8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <HAL_UART_IRQHandler+0x196>
 8004ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 823c 	beq.w	8005352 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d013      	beq.n	8004f0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d04f      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 feb9 	bl	8005caa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d141      	bne.n	8004fca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1d9      	bne.n	8004f46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d013      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9e:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <HAL_UART_IRQHandler+0x2b8>)
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fd fcf4 	bl	8002994 <HAL_DMA_Abort_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e00f      	b.n	8004fe2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9da 	bl	800537c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	e00b      	b.n	8004fe2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9d6 	bl	800537c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	e007      	b.n	8004fe2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9d2 	bl	800537c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004fe0:	e1b7      	b.n	8005352 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe2:	bf00      	nop
    return;
 8004fe4:	e1b5      	b.n	8005352 <HAL_UART_IRQHandler+0x61a>
 8004fe6:	bf00      	nop
 8004fe8:	10000001 	.word	0x10000001
 8004fec:	04000120 	.word	0x04000120
 8004ff0:	08005d77 	.word	0x08005d77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 814a 	bne.w	8005292 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8143 	beq.w	8005292 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 813c 	beq.w	8005292 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2210      	movs	r2, #16
 8005020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	f040 80b5 	bne.w	800519c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800503e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8187 	beq.w	8005356 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800504e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005052:	429a      	cmp	r2, r3
 8005054:	f080 817f 	bcs.w	8005356 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800505e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 8086 	bne.w	8005180 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800508c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800509e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1da      	bne.n	8005074 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e1      	bne.n	80050be <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800510a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800511e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005120:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005124:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800512c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e3      	bne.n	80050fa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800514e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005150:	f023 0310 	bic.w	r3, r3, #16
 8005154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005162:	65bb      	str	r3, [r7, #88]	; 0x58
 8005164:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e4      	bne.n	8005140 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fbb1 	bl	80028e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800518c:	b29b      	uxth	r3, r3
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	b29b      	uxth	r3, r3
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f8fb 	bl	8005390 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800519a:	e0dc      	b.n	8005356 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80ce 	beq.w	800535a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80051be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80c9 	beq.w	800535a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44
 80051ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e4      	bne.n	80051c8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	623b      	str	r3, [r7, #32]
   return(result);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005226:	633a      	str	r2, [r7, #48]	; 0x30
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e1      	bne.n	80051fe <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	60fb      	str	r3, [r7, #12]
   return(result);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0310 	bic.w	r3, r3, #16
 8005262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	69b9      	ldr	r1, [r7, #24]
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	617b      	str	r3, [r7, #20]
   return(result);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e4      	bne.n	800524e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f880 	bl	8005390 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005290:	e063      	b.n	800535a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00e      	beq.n	80052bc <HAL_UART_IRQHandler+0x584>
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fd9f 	bl	8005df8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052ba:	e051      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d014      	beq.n	80052f2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d03a      	beq.n	800535e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
    }
    return;
 80052f0:	e035      	b.n	800535e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_UART_IRQHandler+0x5da>
 80052fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd49 	bl	8005da2 <UART_EndTransmit_IT>
    return;
 8005310:	e026      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <HAL_UART_IRQHandler+0x5fa>
 800531e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fd78 	bl	8005e20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005330:	e016      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_UART_IRQHandler+0x628>
 800533e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005342:	2b00      	cmp	r3, #0
 8005344:	da0c      	bge.n	8005360 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fd60 	bl	8005e0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800534c:	e008      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
      return;
 800534e:	bf00      	nop
 8005350:	e006      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
    return;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
      return;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
      return;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_UART_IRQHandler+0x628>
    return;
 800535e:	bf00      	nop
  }
}
 8005360:	37e8      	adds	r7, #232	; 0xe8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop

08005368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ac:	b08c      	sub	sp, #48	; 0x30
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4bab      	ldr	r3, [pc, #684]	; (8005684 <UART_SetConfig+0x2dc>)
 80053d8:	4013      	ands	r3, r2
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4aa0      	ldr	r2, [pc, #640]	; (8005688 <UART_SetConfig+0x2e0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005410:	4313      	orrs	r3, r2
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800541e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005428:	430b      	orrs	r3, r1
 800542a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	f023 010f 	bic.w	r1, r3, #15
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a91      	ldr	r2, [pc, #580]	; (800568c <UART_SetConfig+0x2e4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d125      	bne.n	8005498 <UART_SetConfig+0xf0>
 800544c:	4b90      	ldr	r3, [pc, #576]	; (8005690 <UART_SetConfig+0x2e8>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b03      	cmp	r3, #3
 8005458:	d81a      	bhi.n	8005490 <UART_SetConfig+0xe8>
 800545a:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0xb8>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005471 	.word	0x08005471
 8005464:	08005481 	.word	0x08005481
 8005468:	08005479 	.word	0x08005479
 800546c:	08005489 	.word	0x08005489
 8005470:	2301      	movs	r3, #1
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005476:	e0d6      	b.n	8005626 <UART_SetConfig+0x27e>
 8005478:	2302      	movs	r3, #2
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547e:	e0d2      	b.n	8005626 <UART_SetConfig+0x27e>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005486:	e0ce      	b.n	8005626 <UART_SetConfig+0x27e>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548e:	e0ca      	b.n	8005626 <UART_SetConfig+0x27e>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005496:	e0c6      	b.n	8005626 <UART_SetConfig+0x27e>
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7d      	ldr	r2, [pc, #500]	; (8005694 <UART_SetConfig+0x2ec>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d138      	bne.n	8005514 <UART_SetConfig+0x16c>
 80054a2:	4b7b      	ldr	r3, [pc, #492]	; (8005690 <UART_SetConfig+0x2e8>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f003 030c 	and.w	r3, r3, #12
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	d82d      	bhi.n	800550c <UART_SetConfig+0x164>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x110>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	0800550d 	.word	0x0800550d
 80054c0:	0800550d 	.word	0x0800550d
 80054c4:	0800550d 	.word	0x0800550d
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	0800550d 	.word	0x0800550d
 80054d4:	0800550d 	.word	0x0800550d
 80054d8:	080054f5 	.word	0x080054f5
 80054dc:	0800550d 	.word	0x0800550d
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005505 	.word	0x08005505
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f2:	e098      	b.n	8005626 <UART_SetConfig+0x27e>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fa:	e094      	b.n	8005626 <UART_SetConfig+0x27e>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005502:	e090      	b.n	8005626 <UART_SetConfig+0x27e>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550a:	e08c      	b.n	8005626 <UART_SetConfig+0x27e>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005512:	e088      	b.n	8005626 <UART_SetConfig+0x27e>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a5f      	ldr	r2, [pc, #380]	; (8005698 <UART_SetConfig+0x2f0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d125      	bne.n	800556a <UART_SetConfig+0x1c2>
 800551e:	4b5c      	ldr	r3, [pc, #368]	; (8005690 <UART_SetConfig+0x2e8>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d016      	beq.n	800555a <UART_SetConfig+0x1b2>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d818      	bhi.n	8005562 <UART_SetConfig+0x1ba>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d00a      	beq.n	800554a <UART_SetConfig+0x1a2>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d814      	bhi.n	8005562 <UART_SetConfig+0x1ba>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <UART_SetConfig+0x19a>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d008      	beq.n	8005552 <UART_SetConfig+0x1aa>
 8005540:	e00f      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005542:	2300      	movs	r3, #0
 8005544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005548:	e06d      	b.n	8005626 <UART_SetConfig+0x27e>
 800554a:	2302      	movs	r3, #2
 800554c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005550:	e069      	b.n	8005626 <UART_SetConfig+0x27e>
 8005552:	2304      	movs	r3, #4
 8005554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005558:	e065      	b.n	8005626 <UART_SetConfig+0x27e>
 800555a:	2308      	movs	r3, #8
 800555c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005560:	e061      	b.n	8005626 <UART_SetConfig+0x27e>
 8005562:	2310      	movs	r3, #16
 8005564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005568:	e05d      	b.n	8005626 <UART_SetConfig+0x27e>
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a4b      	ldr	r2, [pc, #300]	; (800569c <UART_SetConfig+0x2f4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d125      	bne.n	80055c0 <UART_SetConfig+0x218>
 8005574:	4b46      	ldr	r3, [pc, #280]	; (8005690 <UART_SetConfig+0x2e8>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d016      	beq.n	80055b0 <UART_SetConfig+0x208>
 8005582:	2bc0      	cmp	r3, #192	; 0xc0
 8005584:	d818      	bhi.n	80055b8 <UART_SetConfig+0x210>
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d00a      	beq.n	80055a0 <UART_SetConfig+0x1f8>
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d814      	bhi.n	80055b8 <UART_SetConfig+0x210>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <UART_SetConfig+0x1f0>
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d008      	beq.n	80055a8 <UART_SetConfig+0x200>
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x210>
 8005598:	2300      	movs	r3, #0
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559e:	e042      	b.n	8005626 <UART_SetConfig+0x27e>
 80055a0:	2302      	movs	r3, #2
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a6:	e03e      	b.n	8005626 <UART_SetConfig+0x27e>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ae:	e03a      	b.n	8005626 <UART_SetConfig+0x27e>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b6:	e036      	b.n	8005626 <UART_SetConfig+0x27e>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055be:	e032      	b.n	8005626 <UART_SetConfig+0x27e>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a30      	ldr	r2, [pc, #192]	; (8005688 <UART_SetConfig+0x2e0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d12a      	bne.n	8005620 <UART_SetConfig+0x278>
 80055ca:	4b31      	ldr	r3, [pc, #196]	; (8005690 <UART_SetConfig+0x2e8>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055d8:	d01a      	beq.n	8005610 <UART_SetConfig+0x268>
 80055da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055de:	d81b      	bhi.n	8005618 <UART_SetConfig+0x270>
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e4:	d00c      	beq.n	8005600 <UART_SetConfig+0x258>
 80055e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ea:	d815      	bhi.n	8005618 <UART_SetConfig+0x270>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <UART_SetConfig+0x250>
 80055f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f4:	d008      	beq.n	8005608 <UART_SetConfig+0x260>
 80055f6:	e00f      	b.n	8005618 <UART_SetConfig+0x270>
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fe:	e012      	b.n	8005626 <UART_SetConfig+0x27e>
 8005600:	2302      	movs	r3, #2
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005606:	e00e      	b.n	8005626 <UART_SetConfig+0x27e>
 8005608:	2304      	movs	r3, #4
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560e:	e00a      	b.n	8005626 <UART_SetConfig+0x27e>
 8005610:	2308      	movs	r3, #8
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005616:	e006      	b.n	8005626 <UART_SetConfig+0x27e>
 8005618:	2310      	movs	r3, #16
 800561a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561e:	e002      	b.n	8005626 <UART_SetConfig+0x27e>
 8005620:	2310      	movs	r3, #16
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a17      	ldr	r2, [pc, #92]	; (8005688 <UART_SetConfig+0x2e0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	f040 80a8 	bne.w	8005782 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005636:	2b08      	cmp	r3, #8
 8005638:	d834      	bhi.n	80056a4 <UART_SetConfig+0x2fc>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <UART_SetConfig+0x298>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005665 	.word	0x08005665
 8005644:	080056a5 	.word	0x080056a5
 8005648:	0800566d 	.word	0x0800566d
 800564c:	080056a5 	.word	0x080056a5
 8005650:	08005673 	.word	0x08005673
 8005654:	080056a5 	.word	0x080056a5
 8005658:	080056a5 	.word	0x080056a5
 800565c:	080056a5 	.word	0x080056a5
 8005660:	0800567b 	.word	0x0800567b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005664:	f7fe f8e6 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800566a:	e021      	b.n	80056b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <UART_SetConfig+0x2f8>)
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005670:	e01e      	b.n	80056b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005672:	f7fe f871 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8005676:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005678:	e01a      	b.n	80056b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005680:	e016      	b.n	80056b0 <UART_SetConfig+0x308>
 8005682:	bf00      	nop
 8005684:	cfff69f3 	.word	0xcfff69f3
 8005688:	40008000 	.word	0x40008000
 800568c:	40013800 	.word	0x40013800
 8005690:	40021000 	.word	0x40021000
 8005694:	40004400 	.word	0x40004400
 8005698:	40004800 	.word	0x40004800
 800569c:	40004c00 	.word	0x40004c00
 80056a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 812a 	beq.w	800590c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	4a9e      	ldr	r2, [pc, #632]	; (8005938 <UART_SetConfig+0x590>)
 80056be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d305      	bcc.n	80056e8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056ee:	e10d      	b.n	800590c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	2200      	movs	r2, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	60fa      	str	r2, [r7, #12]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	4a8e      	ldr	r2, [pc, #568]	; (8005938 <UART_SetConfig+0x590>)
 80056fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005702:	b29b      	uxth	r3, r3
 8005704:	2200      	movs	r2, #0
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800570e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005712:	f7fa fd81 	bl	8000218 <__aeabi_uldivmod>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4610      	mov	r0, r2
 800571c:	4619      	mov	r1, r3
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	020b      	lsls	r3, r1, #8
 8005728:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800572c:	0202      	lsls	r2, r0, #8
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	6849      	ldr	r1, [r1, #4]
 8005732:	0849      	lsrs	r1, r1, #1
 8005734:	2000      	movs	r0, #0
 8005736:	460c      	mov	r4, r1
 8005738:	4605      	mov	r5, r0
 800573a:	eb12 0804 	adds.w	r8, r2, r4
 800573e:	eb43 0905 	adc.w	r9, r3, r5
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	469a      	mov	sl, r3
 800574a:	4693      	mov	fp, r2
 800574c:	4652      	mov	r2, sl
 800574e:	465b      	mov	r3, fp
 8005750:	4640      	mov	r0, r8
 8005752:	4649      	mov	r1, r9
 8005754:	f7fa fd60 	bl	8000218 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005766:	d308      	bcc.n	800577a <UART_SetConfig+0x3d2>
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576e:	d204      	bcs.n	800577a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a3a      	ldr	r2, [r7, #32]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	e0c8      	b.n	800590c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005780:	e0c4      	b.n	800590c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578a:	d167      	bne.n	800585c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800578c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005790:	2b08      	cmp	r3, #8
 8005792:	d828      	bhi.n	80057e6 <UART_SetConfig+0x43e>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x3f4>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057e7 	.word	0x080057e7
 80057b4:	080057e7 	.word	0x080057e7
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	080057df 	.word	0x080057df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c0:	f7fe f838 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057c6:	e014      	b.n	80057f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fe f84a 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057ce:	e010      	b.n	80057f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b5a      	ldr	r3, [pc, #360]	; (800593c <UART_SetConfig+0x594>)
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057d4:	e00d      	b.n	80057f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fd ffbf 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057dc:	e009      	b.n	80057f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057e4:	e005      	b.n	80057f2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8089 	beq.w	800590c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	4a4e      	ldr	r2, [pc, #312]	; (8005938 <UART_SetConfig+0x590>)
 8005800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005804:	461a      	mov	r2, r3
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	fbb3 f3f2 	udiv	r3, r3, r2
 800580c:	005a      	lsls	r2, r3, #1
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	441a      	add	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d916      	bls.n	8005854 <UART_SetConfig+0x4ac>
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582c:	d212      	bcs.n	8005854 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f023 030f 	bic.w	r3, r3, #15
 8005836:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	b29b      	uxth	r3, r3
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	b29a      	uxth	r2, r3
 8005844:	8bfb      	ldrh	r3, [r7, #30]
 8005846:	4313      	orrs	r3, r2
 8005848:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	8bfa      	ldrh	r2, [r7, #30]
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	e05b      	b.n	800590c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800585a:	e057      	b.n	800590c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800585c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005860:	2b08      	cmp	r3, #8
 8005862:	d828      	bhi.n	80058b6 <UART_SetConfig+0x50e>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0x4c4>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058b7 	.word	0x080058b7
 800587c:	080058a7 	.word	0x080058a7
 8005880:	080058b7 	.word	0x080058b7
 8005884:	080058b7 	.word	0x080058b7
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058af 	.word	0x080058af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005890:	f7fd ffd0 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8005894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005896:	e014      	b.n	80058c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005898:	f7fd ffe2 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 800589c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800589e:	e010      	b.n	80058c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a0:	4b26      	ldr	r3, [pc, #152]	; (800593c <UART_SetConfig+0x594>)
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058a4:	e00d      	b.n	80058c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fd ff57 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 80058aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ac:	e009      	b.n	80058c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058b4:	e005      	b.n	80058c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058c0:	bf00      	nop
    }

    if (pclk != 0U)
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d021      	beq.n	800590c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	4a1a      	ldr	r2, [pc, #104]	; (8005938 <UART_SetConfig+0x590>)
 80058ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	441a      	add	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d909      	bls.n	8005906 <UART_SetConfig+0x55e>
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d205      	bcs.n	8005906 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	e002      	b.n	800590c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2201      	movs	r2, #1
 8005910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2201      	movs	r2, #1
 8005918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2200      	movs	r2, #0
 8005920:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005928:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800592c:	4618      	mov	r0, r3
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005936:	bf00      	nop
 8005938:	080060c4 	.word	0x080060c4
 800593c:	00f42400 	.word	0x00f42400

08005940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3e:	d10a      	bne.n	8005a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
  }
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a94:	f7fb f980 	bl	8000d98 <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d10e      	bne.n	8005ac6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f82f 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e025      	b.n	8005b12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d10e      	bne.n	8005af2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f819 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e00f      	b.n	8005b12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b09c      	sub	sp, #112	; 0x70
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2a:	e0a9      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	f000 80a5 	beq.w	8005c80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	f7fb f92f 	bl	8000d98 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x32>
 8005b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d140      	bne.n	8005bce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b60:	667b      	str	r3, [r7, #100]	; 0x64
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	663b      	str	r3, [r7, #96]	; 0x60
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ba0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e069      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d051      	beq.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bea:	d149      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e6      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	613b      	str	r3, [r7, #16]
   return(result);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c48:	623a      	str	r2, [r7, #32]
 8005c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	69f9      	ldr	r1, [r7, #28]
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e5      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e010      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f43f af46 	beq.w	8005b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3770      	adds	r7, #112	; 0x70
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b095      	sub	sp, #84	; 0x54
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e6      	bne.n	8005cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e3      	bne.n	8005ce4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d118      	bne.n	8005d56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0310 	bic.w	r3, r3, #16
 8005d38:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005d6a:	bf00      	nop
 8005d6c:	3754      	adds	r7, #84	; 0x54
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f7ff faf1 	bl	800537c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b088      	sub	sp, #32
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6979      	ldr	r1, [r7, #20]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e6      	bne.n	8005daa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fabc 	bl	8005368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005df0:	bf00      	nop
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e027      	b.n	8005e9a <HAL_UARTEx_DisableFifoMode+0x66>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2224      	movs	r2, #36	; 0x24
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e02d      	b.n	8005f1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2224      	movs	r2, #36	; 0x24
 8005eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0201 	bic.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f850 	bl	8005fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e02d      	b.n	8005f96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2224      	movs	r2, #36	; 0x24
 8005f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f812 	bl	8005fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d108      	bne.n	8005fc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fc0:	e031      	b.n	8006026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	0e5b      	lsrs	r3, r3, #25
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	0f5b      	lsrs	r3, r3, #29
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	7b3a      	ldrb	r2, [r7, #12]
 8005fee:	4911      	ldr	r1, [pc, #68]	; (8006034 <UARTEx_SetNbDataToProcess+0x94>)
 8005ff0:	5c8a      	ldrb	r2, [r1, r2]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ff6:	7b3a      	ldrb	r2, [r7, #12]
 8005ff8:	490f      	ldr	r1, [pc, #60]	; (8006038 <UARTEx_SetNbDataToProcess+0x98>)
 8005ffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	7b7a      	ldrb	r2, [r7, #13]
 800600c:	4909      	ldr	r1, [pc, #36]	; (8006034 <UARTEx_SetNbDataToProcess+0x94>)
 800600e:	5c8a      	ldrb	r2, [r1, r2]
 8006010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006014:	7b7a      	ldrb	r2, [r7, #13]
 8006016:	4908      	ldr	r1, [pc, #32]	; (8006038 <UARTEx_SetNbDataToProcess+0x98>)
 8006018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800601a:	fb93 f3f2 	sdiv	r3, r3, r2
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	080060dc 	.word	0x080060dc
 8006038:	080060e4 	.word	0x080060e4

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4d0d      	ldr	r5, [pc, #52]	; (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	; (8006078 <__libc_init_array+0x3c>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2600      	movs	r6, #0
 8006048:	42a6      	cmp	r6, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4d0b      	ldr	r5, [pc, #44]	; (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	; (8006080 <__libc_init_array+0x44>)
 8006050:	f000 f820 	bl	8006094 <_init>
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2600      	movs	r6, #0
 800605a:	42a6      	cmp	r6, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f855 3b04 	ldr.w	r3, [r5], #4
 8006064:	4798      	blx	r3
 8006066:	3601      	adds	r6, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f855 3b04 	ldr.w	r3, [r5], #4
 800606e:	4798      	blx	r3
 8006070:	3601      	adds	r6, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	080060f4 	.word	0x080060f4
 8006078:	080060f4 	.word	0x080060f4
 800607c:	080060f4 	.word	0x080060f4
 8006080:	080060f8 	.word	0x080060f8

08006084 <memset>:
 8006084:	4402      	add	r2, r0
 8006086:	4603      	mov	r3, r0
 8006088:	4293      	cmp	r3, r2
 800608a:	d100      	bne.n	800608e <memset+0xa>
 800608c:	4770      	bx	lr
 800608e:	f803 1b01 	strb.w	r1, [r3], #1
 8006092:	e7f9      	b.n	8006088 <memset+0x4>

08006094 <_init>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	bf00      	nop
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr

080060a0 <_fini>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr
